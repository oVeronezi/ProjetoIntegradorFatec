@model IEnumerable<ControleDietaHospitalarUnimedJau.Models.Entrega>

@{
    ViewData["Title"] = "Listagem de Entregas";
}

<div class="container mt-4">
    <h2 class="fw-bold text-center">Entregas</h2>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <a asp-action="Create" class="btn btn-success">+ Registrar Nova Entrega</a>
    </div>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var item in Model)
        {
            <div class="col">
                <div class="card shadow-sm h-100 border-0">
                    <div class="card-body">
                        <h5 class="card-title text-primary mb-2">
                            Entrega #@item.Id
                        </h5>

                        <p class="mb-1">
                            <strong>Início:</strong> @item.HoraInicio.ToLocalTime().ToString("dd/MM HH:mm:ss")
                        </p>

                        <p class="mb-1">
                            <strong>Fim:</strong>
                            @if (item.HoraFim.HasValue)
                            {
                                @item.HoraFim.Value.ToLocalTime().ToString("dd/MM HH:mm:ss")
                            }
                            else
                            {
                                <form asp-action="Finalizar" asp-route-id="@item.Id" method="post" class="d-inline">
                                    <button type="submit" class="btn btn-sm btn-success">Finalizar</button>
                                </form>
                            }
                        </p>

                        <p class="mb-1">
                            <strong>Status:</strong>
                            @if (item.HoraFim.HasValue)
                            {
                                <span class="text-success fw-bold">@item.StatusValidacao</span>
                            }
                            else
                            {
                                <span class="text-warning fw-bold">@item.StatusValidacao</span>
                            }
                        </p>

                        <hr />

                        <p class="mb-1"><strong>Paciente:</strong> @(item.DetalhesPaciente?.Nome ?? "N/A")</p>
                        <p class="mb-1"><strong>Copeira:</strong> @(item.DetalhesCopeira?.Nome ?? "N/A")</p>
                        <p class="mb-1"><strong>Bandeja:</strong> @(item.DetalhesBandeja?.CodBandeja ?? "N/A")</p>

                        <p class="mt-2">
                            <strong>Duração:</strong>
                            @if (item.HoraFim.HasValue)
                            {
                                TimeSpan duracao = item.HoraFim.Value - item.HoraInicio;
                                <span class="fw-bold">@duracao.ToString(@"m\m\ s\s")</span>
                            }
                            else
                            {
                                <span class="timer-em-progresso fw-bold text-info"
                                      data-horainicio="@item.HoraInicio.ToString("o")">
                                    Calculando...
                                </span>
                            }
                        </p>

                        <div class="d-flex justify-content-between mt-3">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-primary btn-sm">Editar</a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-secondary btn-sm">Detalhes</a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger btn-sm">Deletar</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function atualizarCronometros() {
            const timers = document.querySelectorAll('.timer-em-progresso');

            timers.forEach(timer => {
                const horaInicioString = timer.getAttribute('data-horainicio');
                const horaInicio = new Date(horaInicioString);
                const agora = new Date();
                let diffMs = agora - horaInicio;
                if (diffMs < 0) diffMs = 0;

                let diffSegundos = Math.floor(diffMs / 1000);
                let horas = Math.floor(diffSegundos / 3600);
                diffSegundos %= 3600;
                let minutos = Math.floor(diffSegundos / 60);
                let segundos = diffSegundos % 60;

                const strHoras = horas > 0 ? String(horas).padStart(2, '0') + ':' : '';
                const strMinutos = String(minutos).padStart(2, '0');
                const strSegundos = String(segundos).padStart(2, '0');
                timer.textContent = `${strHoras}${strMinutos}:${strSegundos}`;
            });
        }

        atualizarCronometros();
        setInterval(atualizarCronometros, 1000);
    </script>
}
