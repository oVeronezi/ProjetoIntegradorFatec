@model IEnumerable<ControleDietaHospitalarUnimedJau.Models.Entrega>

@{
    ViewData["Title"] = "Listagem de Entregas";
}

<h1>Entregas</h1>

<p>
    <a asp-action="Create" class="btn btn-success">Registrar Nova Entrega</a>
</p>
<table class="table table-hover">
    <thead>
        <tr>
            <th>
                Início
            </th>
            <th>
                Fim
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StatusValidacao)
            </th>
            <th>
                Paciente
            </th>
            <th>
                Copeira
            </th>
            <th>
                Bandeja
            </th>
            <th>
                Duração
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @item.HoraInicio.ToLocalTime().ToString("dd/MM HH:mm:ss")
                </td>

                <td>
                    @if (item.HoraFim.HasValue)
                    {
                        @item.HoraFim.Value.ToLocalTime().ToString("dd/MM HH:mm:ss")
                    }
                    else
                    {
                        <form asp-action="Finalizar" asp-route-id="@item.Id" method="post" style="margin:0;">
                            <button type="submit" class="btn btn-sm btn-success">Finalizar</button>
                        </form>
                    }
                </td>

                <td>
                    @if (item.HoraFim.HasValue)
                    {
                        <span class="text-success" style="font-weight:bold;">
                            @Html.DisplayFor(modelItem => item.StatusValidacao)
                        </span>
                    }
                    else
                    {
                        <span class="text-warning" style="font-weight:bold;">
                            @Html.DisplayFor(modelItem => item.StatusValidacao)
                        </span>
                    }
                </td>

                <td>
                    @(item.DetalhesPaciente?.Nome ?? "N/A")
                </td>
                <td>
                    @(item.DetalhesCopeira?.Nome ?? "N/A")
                </td>
                <td>
                    @(item.DetalhesBandeja?.CodBandeja ?? "N/A")
                </td>

                <td>
                    @if (item.HoraFim.HasValue)
                    {
                        TimeSpan duracao = item.HoraFim.Value - item.HoraInicio;

                        <strong>@duracao.ToString(@"m\m\ s\s")</strong>
                    }
                    else
                    {
                        <span class="timer-em-progresso"
                              data-horainicio="@item.HoraInicio.ToString("o")">
                            Calculando...
                        </span>
                    }
                </td>

                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-light">Editar</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-secondary">Detalhes</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">Deletar</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // Esta função atualiza todos os cronómetros na página
        function atualizarCronometros() {
            // 1. Encontra todos os elementos com a classe 'timer-em-progresso'
            const timers = document.querySelectorAll('.timer-em-progresso');

            timers.forEach(timer => {
                // 2. Pega a Hora de Início (em UTC) que colocámos no HTML
                const horaInicioString = timer.getAttribute('data-horainicio');
                const horaInicio = new Date(horaInicioString);

                // 3. Pega a hora atual
                const agora = new Date();

                // 4. Calcula a diferença em milissegundos
                // (O new Date() local já ajusta o UTC para o fuso horário do navegador)
                let diffMs = agora - horaInicio;
                if (diffMs < 0) diffMs = 0;

                // 5. Converte milissegundos para horas, minutos e segundos
                let diffSegundos = Math.floor(diffMs / 1000);
                let horas = Math.floor(diffSegundos / 3600);
                diffSegundos %= 3600;
                let minutos = Math.floor(diffSegundos / 60);
                let segundos = diffSegundos % 60;

                // 6. Formata para "HH:MM:SS" (com zero à esquerda)
                const strMinutos = String(minutos).padStart(2, '0');
                const strSegundos = String(segundos).padStart(2, '0');

                let tempoDecorrido;
                if (horas > 0) {
                    const strHoras = String(horas).padStart(2, '0');
                    tempoDecorrido = `${strHoras}:${strMinutos}:${strSegundos}`;
                } else {
                    tempoDecorrido = `${strMinutos}:${strSegundos}`;
                }

                // 7. Exibe o tempo no elemento
                timer.textContent = tempoDecorrido;
            });
        }

        // 8. Roda a função pela primeira vez
        atualizarCronometros();

        // 9. Roda a função a cada 1 segundo (1000 ms)
        setInterval(atualizarCronometros, 1000);
    </script>
}